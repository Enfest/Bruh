// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "./generated/type-graphql"
}

// Enum for different types of form questions
enum CategoryFormQuestionType {
  SELECT
  MULTISELECT
  TEXT
}

// Model to store the order of questions within a page
model CategoryFormQuestionOrder {
  id         Int @id @default(autoincrement())
  pageId     Int
  questionId Int
  order      Int

  page CategoryFormQuestionPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([pageId, order])
  @@unique([pageId, questionId])
}

// Model to represent a page in the category form
model CategoryFormQuestionPage {
  id          Int    @id @default(autoincrement())
  optionId    Int?
  pageStackId Int?
  pageOrderId Int?
  title       String @default("")
  description String @default("")
  questionIds Int[]

  questionOrders CategoryFormQuestionOrder[]
  pageOrder      CategoryFormQuestionPageOrder[]
  option         CategoryFormQuestionOption?     @relation(fields: [optionId], references: [id])
  pageStack      CategoryFormPageStack?          @relation(fields: [pageStackId], references: [id])

  @@unique([optionId])
}

// Model to represent an option for a form question
model CategoryFormQuestionOption {
  id                      Int  @id @default(autoincrement())
  questionId              Int?
  categoryFormPageStackId Int?

  order Int
  text  String
  page  CategoryFormQuestionPage?

  question CategoryFormQuestion? @relation("QuestionOptions", fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// Model to store the order of pages within a page stack
model CategoryFormQuestionPageOrder {
  id          Int @id @default(autoincrement())
  pageStackId Int
  pageId      Int
  order       Int

  pageStack CategoryFormPageStack    @relation(fields: [pageStackId], references: [id], onDelete: Cascade)
  page      CategoryFormQuestionPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([pageStackId, pageId, order])
}

// Model to store answers for form questions
model CategoryFormAnswer {
  hash       String
  questionId Int
  answer     String   @default("")
  answerList String[] @default([])

  question  CategoryFormQuestion  @relation(fields: [questionId], references: [id])
  pageStack CategoryFormPageStack @relation(fields: [hash], references: [hash])

  @@unique([hash, questionId])
}

// Model to represent a stack of pages in the form
model CategoryFormPageStack {
  id         Int                             @id @default(autoincrement())
  hash       String                          @unique()
  prevHash   String                          @default("")
  pages      CategoryFormQuestionPage[]
  pageOrders CategoryFormQuestionPageOrder[]
  answer     CategoryFormAnswer[]
  done       Boolean                         @default(false)
}

// Model to represent a question in the category form
model CategoryFormQuestion {
  id          Int                      @id @unique
  type        CategoryFormQuestionType
  title       String
  description String

  options CategoryFormQuestionOption[] @relation("QuestionOptions")
  answer  CategoryFormAnswer[]
}

// ... existing commented out model ...
